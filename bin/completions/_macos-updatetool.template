#compdef {{NAME}}

_{{NAME}}() {
  local context state state_descr line
  local -a resource_types brew_subtypes commands sub_commands global_options
  local -a limited_commands_xcode_system limited_commands_all
  
  # Dynamically generated completion arrays
  resource_types=(
{{RESOURCE_COMPLETIONS}}
  )
  
  brew_subtypes=(
{{BREW_SUBTYPE_COMPLETIONS}}
  )
  
  commands=(
{{COMMAND_COMPLETIONS}}
  )
  
  sub_commands=(
{{SUB_COMMAND_COMPLETIONS}}
  )
  
  # Limited command sets for specific resource types
  limited_commands_xcode_system=(
{{LIMITED_XCODE_SYSTEM_COMPLETIONS}}
  )
  
  limited_commands_all=(
{{LIMITED_ALL_COMPLETIONS}}
  )
  
  global_options=(
    '--version:show version information'
    '-v:show version information'
    '--config:show configuration location'
    '--cleanup:remove backup files'
    '--completions:generate shell completions'
    'help:show help information'
    '--help:show help information'
    '-h:show help information'
  )

  _arguments -C \
    '1:resource type:->resource_types' \
    '2:subtype or command:->second_arg' \
    '3:command or sub-command:->third_arg' \
    '4:sub-command:->fourth_arg' \
    '*:packages:->packages'

  case $state in
    resource_types)
      _describe -t resource-types 'resource types' resource_types
      _describe -t global-options 'global options' global_options
      ;;
    
    second_arg)
      case $words[2] in
        brew)
          _describe -t brew-subtypes 'brew subtypes' brew_subtypes
          _describe -t commands 'commands' commands
          ;;
        xcode|system)
          _describe -t commands 'commands' limited_commands_xcode_system
          ;;
        all)
          _describe -t commands 'commands' limited_commands_all
          ;;
        *)
          _describe -t commands 'commands' commands
          ;;
      esac
      ;;
    
    third_arg)
      # This handles: brew [subtype] [command] or resource [command] [sub-command]
      case $words[2] in
        brew)
          if [[ $words[3] == "casks" || $words[3] == "formulas" ]]; then
            # brew subtype command
            _describe -t commands 'commands' commands
          else
            # brew command sub-command
            case $words[3] in
              list|install|update)
                # Only show sub-commands for resources that support them
                case $words[2] in
                  npm|appstore|brew|all)
                    _describe -t sub-commands 'sub-commands' sub_commands
                    ;;
                esac
                ;;
              add|remove)
                _message 'package name'
                ;;
            esac
          fi
          ;;
        *)
          case $words[3] in
            list|install|update)
              # Only show sub-commands for resources that support them
              case $words[2] in
                npm|appstore|brew|all)
                  _describe -t sub-commands 'sub-commands' sub_commands
                  ;;
              esac
              ;;
            add|remove)
              _message 'package name'
              ;;
          esac
          ;;
      esac
      ;;
    
    fourth_arg)
      # This handles: brew [subtype] [command] [sub-command]
      case $words[4] in
        list|install|update)
          case $words[2] in
            brew)
              _describe -t sub-commands 'sub-commands' sub_commands
              ;;
          esac
          ;;
        add|remove)
          _message 'package name'
          ;;
      esac
      ;;
    
    packages)
      # For add/remove commands, allow multiple package names
      local i
      for ((i=2; i<=$#words; i++)); do
        if [[ $words[i] == 'add' || $words[i] == 'remove' ]]; then
          _message 'package name'
          break
        fi
      done
      ;;
  esac
}

compdef _{{NAME}} {{NAME}}
